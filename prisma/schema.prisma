// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SHOP
}

model User {
  id        Int      @id @default(autoincrement())
  email String
  password String
  firstName String
  lastName String
  avatar String
  role Role @default(USER)
  products Product[]
  wishlists Wishlist[]
  addresses Address[]

  Cart Cart?
  orders Order[]
  reviews Review[]

  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  name String
  icon String
  status Boolean @default(true)
  products Product[]
}

model Product {
  id Int @id @default(autoincrement())
  name String
  longDescription String @db.Text
  shortDescription String
  quantity Int
  price Float @default(0)
  main_image String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  shop User? @relation(fields: [shopId], references: [id])
  shopId Int?

  wishlists Wishlist[]

  productImages ProductImages[]
  productVariants ProductVariant[]

  cartItems CartItem[]
  orderItems OrderItem[]
  reviews Review[]


  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt @default(now())
}

model ProductImages {
  id Int @id @default(autoincrement())
  image String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model ProductVariant {
  id Int @id @default(autoincrement())
  name String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  productVariantItems ProductVariantItem[]
}

model ProductVariantItem {
  id Int @id @default(autoincrement())
  name String
  productVariant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId Int
}

model Wishlist {
  userId Int
  productId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
}

model Address {
  id Int @id @default(autoincrement())
  street String
  province String?
  country String
  postalCode Int
  orders Order[]

  user User @relation(fields: [userId], references: [id])
  userId Int
}

model Cart {
  id Int @id @default(autoincrement())
  userId Int @unique
  totalPrice Float
  cartItems CartItem[]
  user User @relation(fields: [userId], references: [id])

}

model CartItem {
  id Int @id @default(autoincrement())
  productId Int
  cartId Int
  variant String? @db.Text
  price Float
  quantity Int @default(1)

  product Product @relation(fields: [productId], references: [id])
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Order {
  id Int @id @default(autoincrement())
  userId Int
  addressId Int
  couponCode String?
  totalPrice Float
  totalQuantity Int @default(1)
  status String

  orderItems OrderItem[]

  user User @relation(fields: [userId], references: [id])
  address Address @relation(fields: [addressId], references: [id])
  coupon Coupon? @relation(fields: [couponCode], references: [code])
}

model OrderItem {
  id Int @id @default(autoincrement())
  productId Int
  orderId Int
  variant String? @db.Text
  price Float
  quantity Int @default(1)

  product Product @relation(fields: [productId], references: [id])
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Coupon {
  code String @id
  discountPrice Int
  discountType DiscountType @default(PERCENT)

  orders Order[]
}

enum DiscountType {
  PERCENT
  VALUE
}

model Review {
  id Int @id @default(autoincrement())
  rating Int
  comment String @db.Text
  userId Int
  productId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt @default(now())
}